rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    
    match /parkingSpaces/{spaceId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null 
                    && request.resource.data.providerId == request.auth.uid
                    && request.resource.data.status == 'pendiente';
      
      allow update: if request.auth != null && (
        (resource.data.status == 'pendiente' && request.resource.data.status == 'reservada' && request.resource.data.takerId == request.auth.uid) ||
        (resource.data.status == 'reservada' && request.resource.data.status == 'completada' && (resource.data.providerId == request.auth.uid || resource.data.takerId == request.auth.uid)) ||
        (resource.data.status == 'reservada' && request.resource.data.status.matches('cancelada_.*') && (resource.data.providerId == request.auth.uid || resource.data.takerId == request.auth.uid)) ||
        (request.resource.data.chatId != resource.data.chatId && resource.data.providerId == request.auth.uid)
      );
      
      allow delete: if request.auth != null 
                    && resource.data.providerId == request.auth.uid 
                    && resource.data.status == 'pendiente';
    }
    
    match /chats/{chatId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if false; 
    }
    
    match /chats/{chatId}/messages/{messageId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        
        allow create: if request.auth != null 
                      && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid])
                      && request.resource.data.senderId == request.auth.uid;
    }
    
  }
}