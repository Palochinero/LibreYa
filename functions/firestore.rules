rules_version = '2';
service cloud.firestore {
 match /databases/{database}/documents {

  /* ───── Usuarios ───── */
  match /users/{uid} {
    // El propio usuario lee y actualiza su doc,
    // pero nunca puede dejar parkcoins < 0
    allow read:   if request.auth.uid == uid;
    allow update: if request.auth.uid == uid
                  && request.resource.data.parkcoins >= 0;
  }

  /* ───── Plazas ───── */
  match /parkingSpaces/{spaceId} {

    /* cualquiera logueado puede listar/ver plazas */
    allow get, list: if request.auth!=null;

    /* crear oferta (estado inicial: pendiente) */
    allow create: if request.auth.uid == request.resource.data.providerId
                  && request.resource.data.status == "pendiente";

    /* actualizar */
    allow update: if request.auth!=null && (
        /* A) proveedor cancela ↙ */
        (request.auth.uid == resource.data.providerId
         && resource.data.status == "reservada"
         && request.resource.data.status == "cancelada")

      ||/* B) conductor reserva ↙ */
        (request.auth.uid == request.resource.data.takerId
         && resource.data.status == "pendiente"
         && request.resource.data.status == "reservada"
         && resource.data.takerId == null)

      ||/* C) conductor completa ↙ */
        (request.auth.uid == resource.data.takerId
         && resource.data.status == "reservada"
         && request.resource.data.status == "completada")
    );

    /* borrar anuncio si aún nadie lo reservó */
    allow delete: if request.auth.uid == resource.data.providerId
                  && resource.data.status == "pendiente";
  }

  /* ───── Chat dentro de cada plaza ───── */
  match /parkingSpaces/{spaceId}/chat/{msgId} {
    function isParticipant(id) {
      let p = get(/databases/$(database)/documents/parkingSpaces/$(id));
      return p.data!=null &&
             (p.data.providerId == request.auth.uid ||
              p.data.takerId    == request.auth.uid);
    }
    allow read, create: if request.auth!=null && isParticipant(spaceId);
  }
 }
}
